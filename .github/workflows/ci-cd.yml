name: CI/CD Workflow
#pull request
on:
  pull_request:
    branches:
      - main

jobs:
  test_and_build:
#    if: github.event.pull_request.merged == true  # Run only if the PR was merged
    name: Run Tests and Build Artifact
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Set up JDK 17 (Java 17 environment)
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      # Step 3: Run tests and ensure the build is successful
      - name: Run Tests (mvn clean install)
        run: |
          mvn clean install

      # Step 4: Verify the JAR file exists
      - name: Check if JAR file exists
        run: |
          if [ ! -f target/CloudApplication-0.0.1-SNAPSHOT.jar ]; then
            echo "JAR file not found! Build may have failed."
            exit 1
          else
            echo "JAR file exists."
          fi

      # Step 5: Archive the build artifact in a separate folder
      - name: Archive Build Artifact
        run: mkdir -p artifacts

      # Step 6: Copy the JAR/WAR file to the artifacts directory
      - name: Copy Build Artifact
        run: cp target/CloudApplication-0.0.1-SNAPSHOT.jar artifacts/

      # Step 7: Upload the build artifact (JAR/WAR) so it can be used in subsequent jobs
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: artifacts/

  packer_build:
    name: Build Custom AMI with Packer
    runs-on: ubuntu-latest
    needs: test_and_build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: artifacts/

      - name: Check File Existence
        run: |
          if [ -f packer/csye6225.service ]; then
            echo "csye6225.service file exists."
          else
            echo "csye6225.service file is missing."
            exit 1
          fi

      - name: Set Permissions for Service File
        run: |
          chmod 644 packer/csye6225.service

      - name: Install Packer
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install packer

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.IAM_USER_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.IAM_USER_SECRET_KEY }}
          aws-region: us-east-1



#      - name: Build AMI with Packer
#        run: |
#          packer init packer/aws-ubuntu.pkr.hcl
#          packer build \
#            -var "artifact_path=artifacts/CloudApplication-0.0.1-SNAPSHOT.jar" \
#            packer/aws-ubuntu.pkr.hcl

      - name: Build AMI with Packer and Extract AMI ID
        id: ami
        run: |
          # Initialize Packer
          packer init packer/aws-ubuntu.pkr.hcl
          
          # Build the AMI using Packer
          echo "Building AMI with Packer..."
          AMI_OUTPUT_LOG="packer-output.log"
          packer build \
            -var "artifact_path=artifacts/CloudApplication-0.0.1-SNAPSHOT.jar" \
            packer/aws-ubuntu.pkr.hcl > "$AMI_OUTPUT_LOG" 2>&1
          
          # Check if the Packer build was successful
          if [ $? -ne 0 ]; then
            echo "Packer build failed! See output:"
            cat "$AMI_OUTPUT_LOG"
            exit 1
          fi
          
          # Extract the AMI ID from the Packer output
          AMI_ID=$(grep -oP 'ami-\w+' "$AMI_OUTPUT_LOG" | head -n 1)
          if [ -z "$AMI_ID" ]; then
            echo "Failed to extract AMI ID from Packer output! See output:"
            cat "$AMI_OUTPUT_LOG"
            exit 1
          fi
          
          # Log the extracted AMI ID for debugging
          echo "Extracted AMI ID: $AMI_ID"
          
          # Export the AMI ID as an environment variable for subsequent steps
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
          
          # Cleanup the log file
          rm -f "$AMI_OUTPUT_LOG"

  

  deploy_to_autoscaling:
    name: Deploy Application to Auto-Scaling Group
    runs-on: ubuntu-latest
    needs: packer_build

    steps:
      # Step 1: Check out the repository code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8  # Use the version you're using locally

      # Step 3: Initialize Terraform
      - name: Terraform Init
        run: terraform init

      # Step 4: Retrieve Launch Template ID
      - name: Get Launch Template ID
        id: launch_template
        run: |
          export LAUNCH_TEMPLATE_ID=$(terraform output -raw launch_template_id)
          echo "LAUNCH_TEMPLATE_ID=$LAUNCH_TEMPLATE_ID" >> $GITHUB_ENV

      # Step 5: Configure AWS Credentials (Dev Account)
      - name: Configure AWS Credentials (Dev Account)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_ACCOUNT_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_ACCOUNT_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 6: Create New Launch Template Version
      - name: Create New Launch Template Version
        run: |
          aws ec2 create-launch-template-version \
            --launch-template-id ${{ env.LAUNCH_TEMPLATE_ID }} \
            --source-version '$Latest' \
            --launch-template-data '{"ImageId":"'"${{ env.AMI_ID }}"'"}'

          aws ec2 modify-launch-template \
            --launch-template-id ${{ env.LAUNCH_TEMPLATE_ID }} \
            --default-version '$Latest'

      # Step 7: Start Instance Refresh
      - name: Start Instance Refresh
        id: refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name app_asg \
            --preferences '{"MinHealthyPercentage":90}' \
            --query 'InstanceRefreshId' \
            --output text)
          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV

      # Step 8: Wait for Instance Refresh to Complete
      - name: Wait for Instance Refresh to Complete
        run: |
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name app_asg \
              --instance-refresh-ids "${{ env.REFRESH_ID }}" \
              --query 'InstanceRefreshes[0].Status' \
              --output text)

            echo "Instance Refresh Status: $STATUS"
            if [ "$STATUS" = "Successful" ]; then
              echo "Instance refresh completed successfully."
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "Instance refresh failed."
              exit 1
            fi
            sleep 30
          done
